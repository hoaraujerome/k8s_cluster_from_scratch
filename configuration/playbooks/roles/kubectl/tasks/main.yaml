---
- name: Install kubectl binary
  block:
    - name: Capture kubectl installed version
      ansible.builtin.command: "{{ kubectl_target_path }}/kubectl version --client"
      register: kubectl_installed
      ignore_errors: true
      changed_when: false

    - name: Set kubectl installed version fact
      ansible.builtin.set_fact:
        kubectl_installed_version: "{{ kubectl_installed.stdout_lines[0].split(' ')[2] }}"
      when: kubectl_installed.rc == 0

    - name: Remove existing kubectl if version mismatch
      when: kubectl_installed.rc == 0 and kubectl_installed_version != kubectl_version
      ansible.builtin.file:
        path: "{{ kubectl_target_path }}/kubectl"
        state: absent
      become: true

    - name: Install kubectl binary if not installed or version mismatch
      when: kubectl_installed_version|default('') != kubectl_version
      block:
        - name: Download kubectl binary
          ansible.builtin.get_url:
            url: "{{ control_plane_binaries_url }}/kubectl"
            dest: "{{ kubectl_target_path }}"
            owner: root
            group: root
            mode: "0755"
          become: true

- name: Setup PKI
  block:
    - name: Ensure PKI directory exists
      ansible.builtin.file:
        path: "{{ kubectl_pki_path }}"
        state: directory
        mode: "0700"
      become: true

    - name: Copy certs and keys to target directory
      ansible.builtin.copy:
        src: "{{ kubectl_pki_src_path }}/{{ item }}"
        dest: "{{ kubectl_pki_path }}"
        remote_src: false
        owner: root
        group: root
        mode: "0600"
      loop:
        - "{{ kubectl_ca_file }}"
        - "{{ kubectl_admin_tls_cert_file }}"
        - "{{ kubectl_admin_tls_private_key_file }}"
      become: true

- name: Generate Admin K8S Configuration Files For Authentification
  block:
    - name: Set Kubernetes cluster in kubeconfig
      ansible.builtin.command: >
        kubectl config set-cluster kubernetes-the-hard-way-on-aws
        --certificate-authority="{{ kubectl_pki_path }}/{{ kubectl_ca_file }}"
        --embed-certs=true
        --server=https://127.0.0.1:6443
        --kubeconfig=/root/admin.kubeconfig
      become: true
      register: kubectl_set_cluster
      changed_when: kubectl_set_cluster.stdout != ""

    - name: Set Kubernetes credentials in kubeconfig
      ansible.builtin.command: >
        kubectl config set-credentials admin
        --client-certificate="{{ kubectl_pki_path }}/{{ kubectl_admin_tls_cert_file }}"
        --client-key="{{ kubectl_pki_path }}/{{ kubectl_admin_tls_private_key_file }}"
        --embed-certs=true
        --kubeconfig=/root/admin.kubeconfig
      become: true
      register: kubectl_set_credentials
      changed_when: kubectl_set_credentials.stdout != ""

    - name: Set Kubernetes context in kubeconfig
      ansible.builtin.command: >
        kubectl config set-context default
        --cluster=kubernetes-the-hard-way-on-aws
        --user=admin
        --kubeconfig=/root/admin.kubeconfig
      become: true
      register: kubectl_set_context
      changed_when: kubectl_set_context.stdout != ""

    - name: Use the default Kubernetes context
      ansible.builtin.command: >
        kubectl config use-context default
        --kubeconfig=/root/admin.kubeconfig
      become: true
      register: kubectl_use_context
      changed_when: kubectl_use_context.stdout != ""
