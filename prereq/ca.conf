# ***
# Used for Certificate Authority generation
# ***
[req]
distinguished_name = req_distinguished_name
prompt             = no
x509_extensions    = ca_x509_extensions

[req_distinguished_name]
C  = CA
ST = Quebec
L  = Montreal
O = hoaraujerome
OU = Root CA Team
CN = K8S The Hard Way Root CA

[ca_x509_extensions]
basicConstraints = CA:TRUE
keyUsage         = cRLSign, keyCertSign

# ***
# Used for Client And Server Certificates generation
# ***
[default_req_extensions]
# Indicates that the certificate is not a Certificate Authority (CA) certificate
basicConstraints     = CA:FALSE
# Specifies that the certificate can be used for client authentication
extendedKeyUsage     = clientAuth
# Defines the purposes for which the key can be used. Here, it is marked as critical and can be used for digital signatures and key encipherment
keyUsage             = critical, digitalSignature, keyEncipherment
# Netscape-specific extension indicating that this is a client certificate
nsCertType           = client
nsComment            = "Admin Client Certificate"
# Provides a unique identifier for the certificate based on a hash of the public key
subjectKeyIdentifier = hash

# Service Accounts
#
# The Kubernetes Controller Manager leverages a key pair to generate
# and sign service account tokens as described in the
# [managing service accounts](https://kubernetes.io/docs/admin/service-accounts-admin/)
# documentation.
[service-accounts]
distinguished_name = service-accounts_distinguished_name
# Indicates that the user will not be prompted for input when generating the CSR
prompt             = no
req_extensions     = default_req_extensions

[service-accounts_distinguished_name]
CN = service-accounts
